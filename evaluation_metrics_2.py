# -*- coding: utf-8 -*-
"""EVALUATION_METRICS_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I23bx54u2XsjVE9qtIGbS_BdHqdTMR0B
"""

import numpy as np
from sklearn.metrics import roc_auc_score

def classification_metrics(y_true, y_pred, y_scores=None):
    y_true = np.array(y_true)
    y_pred = np.array(y_pred)

    TP = np.sum((y_true == 1) & (y_pred == 1))
    TN = np.sum((y_true == 0) & (y_pred == 0))
    FP = np.sum((y_true == 0) & (y_pred == 1))
    FN = np.sum((y_true == 1) & (y_pred == 0))

    accuracy = (TP + TN) / len(y_true)
    precision = TP / (TP + FP) if (TP + FP) else 0
    recall = TP / (TP + FN) if (TP + FN) else 0
    specificity = TN / (TN + FP) if (TN + FP) else 0
    f1 = 2 * (precision * recall) / (precision + recall) if (precision + recall) else 0
    balanced_acc = (recall + specificity) / 2


    auc = roc_auc_score(y_true, y_scores) if y_scores is not None else None

    return {
        'Accuracy': accuracy,
        'Precision': precision,
        'Recall (Sensitivity)': recall,
        'Specificity': specificity,
        'F1 Score': f1,
        'Balanced Accuracy': balanced_acc,
        'AUC': auc
    }


y_true = [1, 0, 1, 1, 0, 1, 0, 0]
y_pred = [1, 0, 1, 0, 0, 1, 1, 0]
y_scores = [0.9, 0.1, 0.85, 0.4, 0.3, 0.8, 0.7, 0.2]

metrics = classification_metrics(y_true, y_pred, y_scores)

for key, value in metrics.items():
    print(f"{key}: {value:.4f}" if value is not None else f"{key}: N/A")